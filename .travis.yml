#os:
#  - linux
#  - osx

language: java

env:
  # SWIFT_VERSION: Version to install with swiftenv
  # TERM: Remove status updates in gradle output that only works with interactive shell
  # - MJ_RUN="./run" MJ_TIMEOUT=60 MJ_BIG_TIMEOUT=0 SWIFT_VERSION="4.2" TERM='dumb'
  global:
    - MJ_RUN="./run"
    - MJ_TIMEOUT=60
    - MJ_BIG_TIMEOUT=0
    - SWIFT_VERSION="4.2"
    - TERM="dumb"

matrix:
  include:
    - os: linux
      name: "Checkstyle"
      # sudo: required
      # dist: trusty
      jdk: oraclejdk8
      env: TESTTYPE=checkstyle
    - os: linux
      name: "Frontend and Firm Tests"
      # sudo: required
      # dist: trusty
      jdk: oraclejdk8
      env: TESTTYPE=frontend
    - os: linux
      name: "Compilation Tests with Own Backend"
      # sudo: required
      # dist: trusty
      jdk: oraclejdk8
      env: TESTTYPE=backend
    - os: osx
      name: "Frontend and Firm Tests"
      osx_image: xcode10.1
      env: TESTTYPE=frontend
    - os: osx
      name: "Compilation Tests with Own Backend"
      osx_image: xcode10.1
      env: TESTTYPE=backend

# Due to the time required to run the Swift installation, the install script
# > eval "$(curl -sL https://swiftenv.fuller.li/install.sh)"
# should only be present in jobs that actually need Swift installed.

      # before_script:
  #  - source ~/virtualenv/python3.6/bin/activate


install:
  - python3 --version
  - source ~/virtualenv/python3.6/bin/activate
  - python3 --version
  - |
    case "$TESTTYPE" in
      checkstyle)
        ;;
      frontend)
        ;;
      backend)
        if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then \
          eval "$(curl -sL https://swiftenv.fuller.li/install.sh)" ;
        fi
        ;;
      *)
        echo "Unknown test type! Quitting ..."; return 1
        ;;
    esac

script: |
  case "$TESTTYPE" in
      checkstyle)
        ./mini-java-compiler/gradlew -b ./mini-java-compiler/build.gradle \
        checkstyleMain checkstyleTest
        ;;
      frontend)
        ./build --no-swift && \
        echo "\n\n#### LEXER TESTS\n" && \
        ./mjtest/mjt.py lexer --ci_testing --parallel && \
        echo "\n\n#### PARSER TESTS\n" && \
        ./mjtest/mjt.py syntax --ci_testing --parallel && \
        echo "\n\n#### AST GENERATION TESTS\n" && \
        ./mjtest/mjt.py ast --ci_testing --parallel && \
        echo "\n\n#### SEMANTIC TESTS\n" && \
        ./mjtest/mjt.py semantic --ci_testing --parallel && \
        echo "\n\n#### FIRM COMPILATION TESTS\n" && \
        ./mjtest/mjt.py compile-firm --ci_testing --parallel
        ;;
      backend)
        ./build && \
        echo "#### COMPILATION TESTS" &&
        ./mjtest/mjt.py compile --ci_testing --parallel && \
        echo "#### COMPILATION TESTS (BIG TEST CASES)" &&
        ./molki__build_run_check-BigTests.py &&
        echo "#### COMPILATION TESTS (NO OPTIMIZATIONS)" &&
        ./mjtest/mjt.py no-optimization --ci_testing --parallel
        ;;
      *)
        echo "Unknown test type! Quitting ..."; return 1
        ;;
    esac
